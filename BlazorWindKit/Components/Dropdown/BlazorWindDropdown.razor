@using BlazorWindKit.Core;
@using BlazorWindKit.Core.Enums;
@using Microsoft.JSInterop
@using BlazorWindKit.JsInterop

@typeparam TItem
@inherits OwningComponentBase

@inject DropdownJsInterop DropdownJsInterop

<div class="relative @(RootCssClass ?? "w-full")" @ref="DropdownRef">
    <button onclick="@ToggleDropdown" 
            type="button" 
            class="@ToggleCss"
            disabled="@Disabled"
            aria-expanded="@IsOpen"
            aria-haspopup="listbox"
            aria-controls="@MenuId">
        <span class="flex items-center justify-between w-full @TextCss">
            <span class="block truncate text-inherit">@SelectedText</span>
            <svg class="w-4 h-4 ml-2 flex-shrink-0 transition-transform duration-150 text-inherit @(IsOpen ? "rotate-180" : "")"
                 fill="none" 
                 stroke="currentColor" 
                 stroke-width="2" 
                 viewBox="0 0 24 24"
                 aria-hidden="true">
                <path d="M19 9l-7 7-7-7" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
        </span>
    </button>

    <div id="@MenuId"
         class="@MenuCss"
         role="listbox"
         aria-label="@AriaLabel"
         style="max-height:@(IsOpen ? MenuMaxHeightWhenOpen : "0px"); 
                opacity:@(IsOpen ? "1" : "0"); 
                transform:@(IsOpen ? "scale(1)" : "scale(0.95)");
                @(MenuDisplayMode == TwDropdownMenuDisplayMode.Overlay && !string.IsNullOrWhiteSpace(MenuMaxHeightWhenOpen) ? "overflow-y: auto;" : "")">
        @if (Items?.Any() == true)
        {
            @foreach (var item in Items)
            {
                var isSelected = EqualityComparer<TItem>.Default.Equals(item, Value);
                <button onclick="@(() => SelectItem(item))" 
                class="@ItemCss"
                role="option"
                aria-selected="@isSelected">
                    @if (ItemTemplate is not null)
                    {
                        @ItemTemplate(item)
                    }
                    else
                    {
                        <span class="block truncate text-inherit">@ItemToString(item)</span>
                    }
                </button>
            }
        }
        else if (EmptyTemplate is not null)
        {
            @EmptyTemplate
        }
        else
        {
            <div class="@EmptyCss" role="status">
                @EmptyText
            </div>
        }
    </div>
</div>

@code {
    [Inject] public IJSRuntime JSRuntime { get; set; } = default!;

    #region Data Parameters
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public TItem? Value { get; set; }
    [Parameter] public EventCallback<TItem?> ValueChanged { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Select...";
    [Parameter] public Func<TItem, string>? ItemTextSelector { get; set; }
    [Parameter] public Func<TItem, TItem, bool>? ItemComparer { get; set; }
    #endregion

    #region Template Parameters
    [Parameter] public RenderFragment<TItem>? ItemTemplate { get; set; }
    [Parameter] public RenderFragment? EmptyTemplate { get; set; }
    #endregion

    #region Style Parameters
    [Parameter] public string? RootCssClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? ToggleButtonClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? MenuClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? ItemClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? TextClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? EmptyClass { get; set; }
    #endregion

    #region Style Override Parameters
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultToggleButtonClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultMenuClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultItemClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultTextClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultEmptyClass { get; set; }
    #endregion

    #region Behavior Parameters
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool CloseOnSelect { get; set; } = true;
    [Parameter] public TwDropdownMenuDisplayMode MenuDisplayMode { get; set; } = TwDropdownMenuDisplayMode.Overlay;
    [Parameter] public string MenuMaxHeightWhenOpen { get; set; } = "15rem";
    [Parameter] public TwDropdownDirection Direction { get; set; } = TwDropdownDirection.BottomLeft;
    [Parameter] public int AnimationDuration { get; set; } = 150;
    #endregion

    #region Accessibility Parameters
    [Parameter] public string? AriaLabel { get; set; }
    [Parameter] public string? MenuId { get; set; } = $"dropdown-menu-{Guid.NewGuid()}";
    #endregion

    #region Empty State Parameters
    [Parameter] public string EmptyText { get; set; } = "No items available";
    #endregion

    #region State
    private bool IsOpen { get; set; }
    private ElementReference DropdownRef { get; set; }
    private DotNetObjectReference<BlazorWindDropdown<TItem>>? DotNetRef { get; set; }
    private IJSObjectReference? _handler { get; set; }
    #endregion

    #region Computed Properties
    private string SelectedText => Value is null ? Placeholder : ItemToString(Value);
    private string ItemToString(TItem? item) => item is null ? "" : (ItemTextSelector?.Invoke(item) ?? item.ToString() ?? "");

    private string ToggleCss => (ToggleButtonClass?.Invoke(BlazorWindBuilder.Create()) ??
                               (OverrideDefaultToggleButtonClass?.Invoke(DefaultToggleStyle()) ?? 
                                DefaultToggleStyle())).Build();

    private string MenuCss => (MenuClass?.Invoke(BlazorWindBuilder.Create()) ??
                             (OverrideDefaultMenuClass?.Invoke(DefaultMenuStyle()) ?? 
                              DefaultMenuStyle())).Build();

    private string ItemCss => (ItemClass?.Invoke(BlazorWindBuilder.Create()) ??
                             (OverrideDefaultItemClass?.Invoke(DefaultItemStyle()) ?? 
                              DefaultItemStyle())).Build();

    private string TextCss => (TextClass?.Invoke(BlazorWindBuilder.Create()) ??
                             (OverrideDefaultTextClass?.Invoke(DefaultTextStyle()) ?? 
                              DefaultTextStyle())).Build();

    private string EmptyCss => (EmptyClass?.Invoke(BlazorWindBuilder.Create()) ??
                              (OverrideDefaultEmptyClass?.Invoke(DefaultEmptyStyle()) ?? 
                               DefaultEmptyStyle())).Build();
    #endregion

    #region Default Styles

    private BlazorWindBuilder DefaultToggleStyle() => BlazorWindBuilder.Create()
            .Display(TwDisplay.Flex)
            .Items(TwAlignItems.Center)
            .Gap(3)
            .WidthFull()
            .PaddingX(4)
            .PaddingY(2)
            .BackgroundColor(TwColor.White)
            .BorderWidth(1)
            .BorderColor(TwColor.Gray, 200)
            .TextColor(TwColor.Gray, 800)
            .FontSize(TwTextSize.Sm)
            .FontWeight(TwFontWeight.Medium)
            .Custom("shadow-sm")
            .Transition(TwTransition.All)
            .Custom("duration-200 ease-in-out")
            .Rounded(TwRounded.Md)
            .Hover(b => b
                .BackgroundColor(TwColor.Gray, 50)
                .BorderColor(TwColor.Gray, 300)
                .Custom("shadow-md")
            )
            .Focus(b => b
                .Outline(TwOutline.None)
                .Ring(2)
                .RingColor(TwColor.Blue, 500, 10)
                .BorderColor(TwColor.Blue, 400)
                .Custom("shadow-md")
            )
            .Disabled(b => b
                .Opacity(60)
                .Custom("cursor-not-allowed")
                .Custom("shadow-none")
            );

    private BlazorWindBuilder DefaultTextStyle() => BlazorWindBuilder.Create()
        .FontSize(TwTextSize.Sm)
        .TextColor(TwColor.Gray, 800)
        .FontWeight(TwFontWeight.Medium)
        .Custom("tracking-wide")
        .Sm(s => s
            .FontSize(TwTextSize.Base)
        );

    private BlazorWindBuilder DefaultItemStyle() => BlazorWindBuilder.Create()
        .Display(TwDisplay.Flex)
        .Items(TwAlignItems.Center)
        .Justify(TwJustifyContent.Between)
        .WidthFull()
        .PaddingX(4)
        .PaddingY(2)
        .TextAlign(TwTextAlign.Left)
        .TextColor(TwColor.Gray, 700)
        .FontSize(TwTextSize.Sm)
        .FontWeight(TwFontWeight.Medium)
        .Transition(TwTransition.All)
        .Custom("duration-150 ease-in-out cursor-pointer select-none")
        .Hover(h => h
            .BackgroundColor(TwColor.Gray, 50)
            .TextColor(TwColor.Gray, 900)
            .Custom("translate-x-1")
        )
        .Focus(f => f
            .BackgroundColor(TwColor.Blue, 50)
            .TextColor(TwColor.Blue, 700)
            .Custom("outline-none translate-x-1")
        )
        .Sm(s => s
            .PaddingX(5)
            .PaddingY(3)
        );

    private BlazorWindBuilder DefaultEmptyStyle() => BlazorWindBuilder.Create()
        .Display(TwDisplay.Flex)
        .Items(TwAlignItems.Center)
        .Justify(TwJustifyContent.Center)
        .WidthFull()
        .PaddingX(4)
        .PaddingY(8)
        .TextColor(TwColor.Gray, 400)
        .FontSize(TwTextSize.Sm)
        .FontWeight(TwFontWeight.Medium)
        .Custom("cursor-default")
        .Sm(s => s
            .PaddingY(10)
        );

    private BlazorWindBuilder DefaultMenuStyle()
    {
        var builder = BlazorWindBuilder.Create();

        if (MenuDisplayMode == TwDropdownMenuDisplayMode.Overlay)
        {
            builder.Custom("absolute z-50 w-full")
                   .Rounded(TwRounded.Md)
                   .BackgroundColor(TwColor.White)
                   .BorderWidth(1)
                   .BorderColor(TwColor.Gray, 200)
                   .Custom("shadow-lg")
                   .Custom("backdrop-blur-md bg-white/95")
                   .PaddingY(1)
                   .Transition(TwTransition.All)
                   .Custom("duration-200 ease-in-out")
                   .Custom("transform-gpu")
                   .Focus(b => b
                       .Outline(TwOutline.None)
                       .Transform(TwTransform.Gpu)
                   )
                   .Sm(s => s
                       .Width(64)
                       .Custom("min-w-[200px]")
                   );

            switch (Direction)
            {
                case TwDropdownDirection.TopLeft:
                    builder.Custom("bottom-full mb-2 origin-bottom-left left-0");
                    break;
                case TwDropdownDirection.TopRight:
                    builder.Custom("bottom-full mb-2 origin-bottom-right right-0");
                    break;
                case TwDropdownDirection.BottomRight:
                    builder.Custom("top-full mt-2 origin-top-right right-0");
                    break;
                case TwDropdownDirection.BottomLeft:
                default:
                    builder.Custom("top-full mt-2 origin-top-left left-0");
                    break;
            }
        }
        else // InFlowPush
        {
            builder.Custom("w-full overflow-hidden")
                   .MarginX(5)
                   .BackgroundColor(TwColor.Gray, 200)
                   .BorderWidth(1)
                   .Rounded(TwRounded.Md)
                   .Custom("shadow-lg")
                   .Custom("backdrop-blur-md")
                   .Transition(TwTransition.All)
                   .Custom("duration-200 ease-in-out")
                   .Custom("transform-gpu")
                   .Custom("sticky top-0")
                   .Sm(s => s
                       .Custom("max-w-md mx-auto")
                   );
        }
        return builder;
    }
    #endregion

    #region Event Handlers
    private async Task ToggleDropdown()
    {
        if (Disabled) return;

        if (!IsOpen)
        {
            await RegisterClickOutside();
        }
        else
        {
            await DisposeJs();
        }

        IsOpen = !IsOpen;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectItem(TItem item)
    {
        if (Disabled) return;

        var oldValue = Value;
        Value = item;
        
        if (!EqualityComparer<TItem>.Default.Equals(oldValue, Value))
        {
            await ValueChanged.InvokeAsync(Value);
        }

        if (CloseOnSelect)
        {
            await CloseDropdown();
        }
    }

    private async Task RegisterClickOutside()
    {
        await DisposeJs(); // Ensure we clean up any existing handlers first
        DotNetRef = DotNetObjectReference.Create(this);
        _handler = await DropdownJsInterop.RegisterClickOutside(DropdownRef, DotNetRef);
    }

    [JSInvokable]
    public async Task OnClickOutside()
    {
        if (IsOpen)
        {
            await CloseDropdown();
        }
    }

    private async Task CloseDropdown()
    {
        if (IsOpen)
        {
            IsOpen = false;
            await DisposeJs();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task DisposeJs()
    {
        if (_handler is not null)
        {
            try
            {
                await _handler.InvokeVoidAsync("dispose");
                await _handler.DisposeAsync();
            }
            catch (JSDisconnectedException) { /* Ignore */ }
            catch (InvalidOperationException) { /* Ignore */ }
            _handler = null;
        }
        if (DotNetRef is not null)
        {
            DotNetRef.Dispose();
            DotNetRef = null;
        }
    }
    #endregion

    #region Lifecycle Methods
    public async ValueTask DisposeAsync()
    {
        await DisposeJs();
        GC.SuppressFinalize(this);
    }
    #endregion
} 