@typeparam TItem
@inherits OwningComponentBase

@inject DropdownJsInterop DropdownJsInterop

<div class="@(RootCssClass ?? DefaultRootStyle().Build())" @ref="DropdownRef">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@MenuId" class="@LabelCss">
            @Label
            @if (Required)
            {
                <span class="text-red-500 ml-1">*</span>
            }
        </label>
    }

    <button onclick="@ToggleDropdown" 
    type="button" 
    class="@ToggleCss"
    disabled="@Disabled"
    aria-expanded="@IsOpen"
    aria-haspopup="listbox"
    aria-controls="@MenuId">
        <span class="flex items-center justify-between w-full @TextCss">
            <span class="block truncate text-inherit">@SelectedText</span>
            <svg class="@ChevronCss"
            fill="none" 
            stroke="currentColor" 
            stroke-width="2" 
            viewBox="0 0 24 24"
            aria-hidden="true">
                <path d="M19 9l-7 7-7-7" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
        </span>
    </button>

    <div id="@MenuId"
    class="@MenuCss"
    role="listbox"
    aria-label="@AriaLabel"
    style="max-height:@(IsOpen ? MenuMaxHeightWhenOpen : "0px"); 
           opacity:@(IsOpen ? "1" : "0");">
        @if (Items?.Any() == true)
        {
            <ul class="divide-y divide-gray-100">
                @foreach (var item in Items)
                {
                    var isSelected = EqualityComparer<TItem>.Default.Equals(item, SelectedItem);
                    <li onclick="@(() => SelectItem(item))" 
                    class="@ItemCss"
                    role="option"
                    tabindex="0"
                    aria-selected="@isSelected">
                        @if (ItemTemplate is not null)
                        {
                            @ItemTemplate(item)
                        }
                        else
                        {
                            <span class="block truncate text-inherit">@ItemToString(item)</span>
                        }
                    </li>
                }
            </ul>
        }
        else if (EmptyTemplate is not null)
        {
            @EmptyTemplate
        }
        else
        {
            <div class="@EmptyCss" role="status">
                @EmptyText
            </div>
        }
    </div>
</div>

@code {
    [Inject] public IJSRuntime JSRuntime { get; set; } = default!;

    #region Data Parameters
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public TItem? SelectedItem { get; set; }
    [Parameter] public EventCallback<TItem?> SelectedItemChanged { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Select...";
    [Parameter] public Func<TItem, string>? ItemTextSelector { get; set; }
    [Parameter] public Func<TItem, TItem, bool>? ItemComparer { get; set; }
    #endregion

    #region Template Parameters
    [Parameter] public RenderFragment<TItem>? ItemTemplate { get; set; }
    [Parameter] public RenderFragment? EmptyTemplate { get; set; }
    #endregion

    #region Style Parameters
    [Parameter] public string? RootCssClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? ToggleButtonClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? MenuClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? ItemClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? TextClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? EmptyClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? LabelClass { get; set; }
    #endregion

    #region Style Override Parameters
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultToggleButtonClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultMenuClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultItemClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultTextClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultEmptyClass { get; set; }
    [Parameter] public Func<BlazorWindBuilder, BlazorWindBuilder>? OverrideDefaultLabelClass { get; set; }
    #endregion

    #region Behavior Parameters
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool CloseOnSelect { get; set; } = true;
    [Parameter] public TwDropdownMenuDisplayMode MenuDisplayMode { get; set; } = TwDropdownMenuDisplayMode.Overlay;
    [Parameter] public string MenuMaxHeightWhenOpen { get; set; } = "15rem";
    [Parameter] public TwDropdownDirection Direction { get; set; } = TwDropdownDirection.BottomLeft;
    [Parameter] public int AnimationDuration { get; set; } = 150;
    #endregion

    #region Accessibility Parameters
    [Parameter] public string? AriaLabel { get; set; }
    [Parameter] public string? MenuId { get; set; } = $"dropdown-menu-{Guid.NewGuid()}";
    #endregion

    #region Empty State Parameters
    [Parameter] public string EmptyText { get; set; } = "No items available";
    #endregion

    #region State
    private bool IsOpen { get; set; }
    private ElementReference DropdownRef { get; set; }
    private DotNetObjectReference<BlazorWindDropdown<TItem>>? DotNetRef { get; set; }
    private IJSObjectReference? _handler { get; set; }
    #endregion

    #region Computed Properties
    private string SelectedText => SelectedItem is null ? Placeholder : ItemToString(SelectedItem);
    private string ItemToString(TItem? item) => item is null ? "" : (ItemTextSelector?.Invoke(item) ?? item.ToString() ?? "");

    private string ToggleCss => (ToggleButtonClass?.Invoke(BlazorWindBuilder.Create()) ??
                               (OverrideDefaultToggleButtonClass?.Invoke(DefaultToggleStyle()) ?? 
                                DefaultToggleStyle())).Build();

    private string MenuCss => (MenuClass?.Invoke(BlazorWindBuilder.Create()) ??
                             (OverrideDefaultMenuClass?.Invoke(DefaultMenuStyle()) ?? 
                              DefaultMenuStyle())).Build();

    private string ItemCss => (ItemClass?.Invoke(BlazorWindBuilder.Create()) ??
                             (OverrideDefaultItemClass?.Invoke(DefaultItemStyle()) ?? 
                              DefaultItemStyle())).Build();

    private string TextCss => (TextClass?.Invoke(BlazorWindBuilder.Create()) ??
                             (OverrideDefaultTextClass?.Invoke(DefaultTextStyle()) ?? 
                              DefaultTextStyle())).Build();

    private string EmptyCss => (EmptyClass?.Invoke(BlazorWindBuilder.Create()) ??
                              (OverrideDefaultEmptyClass?.Invoke(DefaultEmptyStyle()) ?? 
                               DefaultEmptyStyle())).Build();

    private string LabelCss => (LabelClass?.Invoke(BlazorWindBuilder.Create()) ??
                              (OverrideDefaultLabelClass?.Invoke(DefaultLabelStyle()) ?? 
                               DefaultLabelStyle())).Build();

    private string ChevronCss => BlazorWindBuilder.Create()
        .Width(4)
        .Height(4)
        .MarginLeft(2)
        .Custom("flex-shrink-0")
        .TextColor(TwColor.Gray, 700)
        .Transition(TwTransition.All)
        .Custom("duration-200")
        .Custom(IsOpen ? "rotate-180" : "")
        .Build();
    #endregion

    #region Default Styles
    private BlazorWindBuilder DefaultRootStyle() => BlazorWindBuilder.Create()
        .Position(TwPosition.Relative)
        .WidthFull();

    private BlazorWindBuilder DefaultLabelStyle() => BlazorWindBuilder.Create()
        .Display(TwDisplay.Block)
        .MarginBottom(1)
        .Custom("text-[8px]")
        .FontWeight(TwFontWeight.Light)
        .TextColor(TwColor.White)
        .Sm(s => s
            .TextSize(TwTextSize.Base)
        );

    private BlazorWindBuilder DefaultToggleStyle() => BlazorWindBuilder.Create()
        .Display(TwDisplay.Flex)
        .AlignItems(TwAlignItems.Center)
        .JustifyContent(TwJustifyContent.Between)
        .WidthFull()
        .BackgroundColor(TwColor.White)
        .BorderWidth(1)
        .BorderColor(TwColor.Gray, 300)
        .Rounded(TwRounded.Md)
        .Shadow(1)
        .PaddingX(3)
        .PaddingY(2)
        .TextSize(TwTextSize.Sm)
        .FontWeight(TwFontWeight.Medium)
        .TextColor(TwColor.Gray, 700)
        .Transition(TwTransition.All)
        .Custom("duration-150")
        .Hover(b => b
            .BackgroundColor(TwColor.Gray, 50)
        )
        .Focus(b => b
            .Outline(TwOutline.None)
            .Ring(2)
            .RingColor(TwColor.Blue, 500)
            .BorderColor(TwColor.Blue, 500)
        )
        .Disabled(b => b
            .Custom("cursor-not-allowed")
        );

    private BlazorWindBuilder DefaultTextStyle() => BlazorWindBuilder.Create()
        .TextColor(TwColor.Gray, 700)
        .FontWeight(TwFontWeight.Medium);

    private BlazorWindBuilder DefaultItemStyle() => BlazorWindBuilder.Create()
        .WidthFull()
        .TextAlign(TwTextAlign.Left)
        .PaddingX(3)
        .PaddingY(2)
        .TextSize(TwTextSize.Sm)
        .TextColor(TwColor.Gray, 900)
        .Custom("cursor-pointer")
        .Custom("truncate")
        .Hover(b => b
            .BackgroundColor(TwColor.Gray, 100)
        )
        .Focus(b => b
            .BackgroundColor(TwColor.Gray, 100)
        );

    private BlazorWindBuilder DefaultEmptyStyle() => BlazorWindBuilder.Create()
        .PaddingX(3)
        .PaddingY(2)
        .TextSize(TwTextSize.Sm)
        .TextColor(TwColor.Gray, 500)
        .TextAlign(TwTextAlign.Center);

    private BlazorWindBuilder DefaultMenuStyle()
    {
        var builder = BlazorWindBuilder.Create()
            .Position(TwPosition.Absolute)
            .Custom("z-index-10")
            .MarginTop(1)
            .WidthFull()
            .BackgroundColor(TwColor.White)
            .BorderWidth(1)
            .BorderColor(TwColor.Gray, 300)
            .Rounded(TwRounded.Md)
            .Shadow(8)
            .Transition(TwTransition.All)
            .Custom("duration-200")
            .Custom("overflow-hidden");

        if (MenuDisplayMode == TwDropdownMenuDisplayMode.Overlay)
        {
            builder.Custom("absolute z-50 w-full")
                   .Rounded(TwRounded.Md)
                   .BackgroundColor(TwColor.White)
                   .BorderWidth(1)
                   .BorderColor(TwColor.Gray, 200)
                   .Custom("shadow-lg")
                   .Custom("backdrop-blur-md bg-white/95")
                   .PaddingY(1)
                   .Focus(b => b
                       .Outline(TwOutline.None)
                   )
                   .Sm(s => s
                       .Width(64)
                       .Custom("min-w-[200px]")
                   );

            switch (Direction)
            {
                case TwDropdownDirection.TopLeft:
                    builder.Custom("bottom-full mb-2 left-0");
                    break;
                case TwDropdownDirection.TopRight:
                    builder.Custom("bottom-full mb-2 right-0");
                    break;
                case TwDropdownDirection.BottomRight:
                    builder.Custom("top-full mt-2 right-0");
                    break;
                case TwDropdownDirection.BottomLeft:
                default:
                    builder.Custom("top-full mt-2 left-0");
                    break;
            }
        }
        else // InFlowPush
        {
            builder.Custom("w-full overflow-hidden")
                   .BackgroundColor(TwColor.White)
                   .BorderWidth(1)
                   .BorderColor(TwColor.Gray, 200)
                   .Rounded(TwRounded.Md)
                   .Custom("shadow-lg")
                   .Custom("backdrop-blur-md")
                   .Custom("sticky top-0")
                   .Sm(s => s
                       .Custom("max-w-md mx-auto")
                   );
        }
        return builder;
    }
    #endregion

    #region Event Handlers
    private async Task ToggleDropdown()
    {
        if (Disabled) return;

        if (!IsOpen)
        {
            await RegisterClickOutside();
        }
        else
        {
            await DisposeJs();
        }

        IsOpen = !IsOpen;
        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectItem(TItem item)
    {
        if (Disabled) return;

        var oldValue = SelectedItem;
        SelectedItem = item;
        
        if (!EqualityComparer<TItem>.Default.Equals(oldValue, SelectedItem))
        {
            await SelectedItemChanged.InvokeAsync(SelectedItem);
        }

        if (CloseOnSelect)
        {
            await CloseDropdown();
        }
    }

    private async Task RegisterClickOutside()
    {
        await DisposeJs(); // Ensure we clean up any existing handlers first
        DotNetRef = DotNetObjectReference.Create(this);
        _handler = await DropdownJsInterop.RegisterClickOutside(DropdownRef, DotNetRef);
    }

    [JSInvokable]
    public async Task OnClickOutside()
    {
        if (IsOpen)
        {
            await CloseDropdown();
        }
    }

    private async Task CloseDropdown()
    {
        if (IsOpen)
        {
            IsOpen = false;
            await DisposeJs();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task DisposeJs()
    {
        if (_handler is not null)
        {
            try
            {
                await _handler.InvokeVoidAsync("dispose");
                await _handler.DisposeAsync();
            }
            catch (JSDisconnectedException) { /* Ignore */ }
            catch (InvalidOperationException) { /* Ignore */ }
            _handler = null;
        }
        if (DotNetRef is not null)
        {
            DotNetRef.Dispose();
            DotNetRef = null;
        }
    }
    #endregion

    #region Lifecycle Methods
    public async ValueTask DisposeAsync()
    {
        await DisposeJs();
        GC.SuppressFinalize(this);
    }
    #endregion
} 